<?php
// $Id$

/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implementation of hook_menu().
 */
function custom_import_menu() {
  $items = array();

  $items['admin/content/custom-import'] = array(
    'title' => 'Custom import',
    'description' => 'Run custom import routines to migrate from one Drupal version to another.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_import_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function custom_import_form() {
  drupal_set_message('Are you sure you want to run the custom import script?  No going back without re-installing the database!!!', 'warning');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

function custom_import_form_submit($form, &$form_state) {
  $batch = array(
    'title' => t('Importing data'),
    'operations' => custom_import_batch_operations(),
    'finished' => 'custom_import_batch_finished',
  );

  batch_set($batch);
}

function custom_import_batch_operations() {
  $operations = array();

//  $operations[] = array('custom_import_batch_files', array());
//  $operations[] = array('custom_import_batch_nodes', array());
//  $operations[] = array('custom_import_batch_taxonomy', array());
//  $operations[] = array('custom_import_batch_comments', array());
//  $operations[] = array('custom_import_update_users', array());
//  $operations[] = array('custom_import_update_nodeuids', array());
//  $operations[] = array('custom_import_update_passwords', array());
//  $operations[] = array('custom_import_nid_mapping', array());
  $operations[] = array('custom_import_node_statistics', array());
  
  return $operations;
}

function custom_import_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Import finished successfully.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

function custom_import_batch_files(&$context) {
  db_set_active('default');
  $query = db_select('file_managed', 'files');
  $query->orderBy('files.fid', 'asc');
  $query->fields('files');
  $result = $query->execute();

  $existing_fids = array();
  $existing_file_names = array();
  foreach ($result as $row) {
    array_push($existing_fids, $row->fid);
    array_push($existing_file_names, $row->filename);
  }

  $max_fid = max($existing_fids);
  
  db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcfiles');
    $query->addExpression('COUNT(fid)', 'count');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_file' => 0,
      'max' => $max,
    );
  }
  
  $limit = 40; // Number of files to process at a time.
  $query = db_select('tcfiles', 'f');
  $query->innerJoin('tcnode', 'n', 'f.nid = n.nid');
  $query->fields('f');
  $query->fields('n', array('created'));
  $query->orderBy('f.fid', 'asc');
  $query->condition('fid', $context['sandbox']['current_file'], '>');
  $result = $query->execute();
  
  foreach ($result as $row) {
    //if( in_array($row->fid, $existing_fids) ) {
    if( in_array($row->filename, $existing_file_names) ) {
      continue;
    } else {
      if(in_array($row->fid, $existing_fids)){
        $row->fid = $max_fid + 1;
        $max_fid = $row->fid;
      }
      dsm($row->filename . " , ". $row->fid);
      $file = (object) array(
        'fid' => $row->fid,
        'uid' => 1,
        'filename' => $row->filename,
        //'uri' => 'public://' . str_replace('sites/default/files/', '', $row->filepath),
        'uri' => 'public://' . $row->filename,
        'filemime' => $row->filemime,
        'filesize' => $row->filesize,
        'status' => 1,
        'timestamp' => $row->created,
      );

      db_set_active('default');
      dsm($file->uri);
      watchdog('File uri', 'File uri - %uri', array('%uri' => $file->uri));
      drupal_write_record('file_managed', $file);

      $context['message'] = t('Importing file @name', array('@name' => $file->filename));
      $context['sandbox']['current_file'] = $row->fid;
      $context['sandbox']['progress']++;
    }
  }

  db_set_active('default'); // Switch back.

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function custom_import_batch_nodes(&$context) {
  db_set_active('default');
  $query = db_select('node', 'n');
  $query->orderBy('n.nid', 'asc');
  $query->fields('n');
  $result = $query->execute();

  $existing_nids = array();
  foreach ($result as $row) {
    array_push($existing_nids, $row->nid);
  }
  $max_nid = max($existing_nids);
   
  $query = db_select('file_managed', 'fm');
  $query->fields('fm');
  $result = $query->execute();

  $existing_fids = array();
  $existing_file_uris = array();
  foreach ($result as $row) {
    array_push($existing_fids, $row->fid);
    $existing_file_uris[$row->fid] = $row->uri;
  }
  $max_fid = max($existing_fids);
  db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcnode');
    //$query->condition('nid', array(224, 236, 237, 238, 239, 240, 241, 242, 243, 244), 'IN'); // For WG imports
    //$query->condition('type', 'forum', '='); //For forum imports
    $query->condition('title', '10.%', 'LIKE'); //For working group topics
    $query->addExpression('COUNT(nid)', 'count');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_node' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('tcnode', 'n');
  $query->join('tcnode_revisions', 'nr', 'nr.vid = n.vid');
  $query->orderBy('n.nid', 'asc');
  $query->fields('n');
  $query->fields('nr', array('body', 'teaser', 'format'));
  $query->condition('n.nid', $context['sandbox']['current_node'], '>');
  //$query->condition('n.nid', array(224, 236, 237, 238, 239, 240, 241, 242, 243, 244), 'IN'); // For WG imports
  $query->condition('n.title', '10.%', 'LIKE'); //For working group topics
  //$query->condition('n.type', 'forum', '='); //For forum imports
//  $query->condition('n.type', array('feed', 'feed_item', 'page'), 'NOT IN');
  //$query->condition('n.nid', '53', '=');
  //$query->condition('n.type', array('mlm', 'usernode', 'simplenews'), 'NOT IN');
  $result = $query->execute();
  $i=0;
  foreach ($result as $row) {
    $node = (object) array(
      //'type' => $row->type == 'story' ? 'article' : $row->type,
      'type' => 'working_group_topic', // Change type to working group
      'uid' => $row->uid,
      'status' => $row->status,
      'language' => LANGUAGE_NONE,
      'created' => $row->created,
      'changed' => $row->changed,
      'comment' => $row->comment,
      'promote' => $row->promote,
      'title' => $row->title,
      'body' => array(LANGUAGE_NONE => array(array('value' => $row->body, 'summary' => $row->teaser, 'format' => 'filtered_html'))),
      'teaser' => $row->teaser,
      'log' => '',
    );
    if(!in_array($row->nid, $existing_nids)){
      $node->nid = $row->nid;
      $node->vid = $row->vid;
    }
 
    db_set_active('legacy'); // Switch databases.

    // Migrate file uploads to a file field.
    $query = db_select('tcfile_revisions', 'fr');
    $query->fields('fr');
    $query->condition('fr.vid', $row->vid);
    $file_results = $query->execute();
    foreach ($file_results as $file) {
      $file_uri = "public://".$file->description;
      if(array_search($file_uri, $existing_file_uris)) $file->fid = array_search($file_uri, $existing_file_uris);        
      if (!empty($file->fid)) {
        $node->field_attachment[LANGUAGE_NONE][] = array('fid' => $file->fid, 'display' => $file->list, 'description' => $file->description);
      }else{
        //Write to the watchdog is the file is missing
	watchdog('Custom import - file missing', '%nid file - %file_title', array('%file_title' => $file_description, '%nid' => $node->nid));
      }
    }
    /*

    // Migrate images from one image field to another.
    $query = db_select('tccontent_field_image', 'f');
    $query->fields('f');
    $query->condition('vid', $row->vid);
    $image_results = $query->execute();
    foreach ($image_results as $image) {
      if ($image->field_image_fid) {
        $node->field_image[LANGUAGE_NONE][] = array('fid' => $image->field_image_fid, 'title' => '', 'alt' => '');
      }
    }

    // Migrate links from a link field to a text field.
    $query = db_select('tccontent_field_link', 'f');
    $query->fields('f');
    $query->condition('vid', $row->vid);
    $link_results = $query->execute();
    foreach ($link_results as $link) {
      if ($link->field_link_url) {
        $node->field_link[LANGUAGE_NONE][] = array('value' => $link->field_link_url);
        break; // Only import the first link, this is a single-value field now.
      }
    }

    // Migrate story-specific fields.
    if ($node->type == 'article') {
      $query = db_select('tccontent_type_story', 'f');
      $query->fields('f');
      $query->condition('vid', $row->vid);
      $story_results = $query->execute();
      foreach ($story_results as $story) {
        $node->field_border[LANGUAGE_NONE][0] = array('value' => (int) $story->field_image_border_value);
      }
    }
    */
/*

    // Migrate portfolio-specific fields.
    if ($node->type == 'portfolio') {
      $query = db_select('content_type_portfolio', 'f');
      $query->fields('f');
      $query->condition('vid', $row->vid);
      $portfolio_results = $query->execute();
      foreach ($portfolio_results as $portfolio) {
        $node->field_image_link[LANGUAGE_NONE][0] = array('value' => (int) ($portfolio->field_display_type_value == 'Image'));
        $node->field_completion_date[LANGUAGE_NONE][0] = array('value' => date('F j, Y', strtotime($portfolio->field_completion_date_value)));
      }
    }
    
    // Migrate taxonomies. Forum tids.
    $query = db_select('tcterm_node', 'tn');
    $query->join('tcterm_data', 'td', 'tn.tid = td.tid');
    $query->fields('tn');
    $query->fields('td');
    $query->condition('tn.nid', $row->nid, '=');
    $term_results = $query->execute();
    $taxonomy_terms = array();
    foreach ($term_results as $term) {
      $node->taxonomy_forums[LANGUAGE_NONE][] = array('tid' => $term->tid);
      //array_push( $taxonomy_terms, $term->tid );
    }
*/

    //$node->taxonomy = $taxonomy_terms;
    // To maintain the same NID, use drupal_write_record() first, then save.
    db_set_active('default'); // Switch back
/*
    if( in_array( $node->nid, $existing_nids) ) {
      continue;
    } else {
*/
      watchdog('Custom import', '%nid %title before created.', array('%title' => $node->title, '%nid' => $node->nid));
      if(isset($node->field_attachment)) watchdog("Node with file attachment", "%nid with file attachment", array('%nid' => $node->nid));
      watchdog('Working group topic', '<pre>'. print_r($node, TRUE) .'</pre>');
      if(isset($node->nid)){
        drupal_write_record('node', $node);
        drupal_write_record('node_revision', $node);
        node_save($node);
      }else{
	node_save($node);
      }
      watchdog('Custom import', '%nid %title after created.', array('%title' => $node->title, '%nid' => $node->nid));
      $i++;
      $context['message'] = t('Importing node @title', array('@title' => $node->title));
      $context['sandbox']['current_node'] = $row->nid;
      $context['sandbox']['progress']++;
/*
    }
*/
  }
  db_set_active('default'); // Switch back.
  dsm($i." nodes created");
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

//custom_import_batch_news_comments
function custom_import_batch_comments(&$context) {

  // Get the nid mapping 
  db_set_active('default');
  $query = db_select('nid_mapping', nm);
  $query->fields('nm');
  $result = $query->execute();

  $nid_mapping = array();
  foreach($result as $row){
    $nid_mapping[$row->old_nid] = $row->new_nid;
  }

  $previous_db = db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tccomments');
    $query->addExpression('COUNT(cid)', 'count');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('tccomments', 'c');
  $query->fields('c');
  $query->orderBy('c.cid', 'asc');
  $query->condition('cid', $context['sandbox']['current_comment'], '>');
  $result = $query->execute();
  $i = 0;
  db_set_active('default');
  foreach ($result as $row) {
    $comment = (object) $row;
    $comment->language = LANGUAGE_NONE;
    $comment->status = (int) !$row->status; // Flipped between D6 and D7.
    $comment->created = $row->timestamp;
    $comment->changed = $row->timestamp;
    $comment->uid = $row->uid;
    $comment->nid = $nid_mapping[$row->nid];
    $comment->comment_body[LANGUAGE_NONE][0] = array('value' => $row->comment, 'format' => 'filtered_html');

    // To maintain the same CID, use drupal_write_record() first, then save.
    $i++;
    drupal_write_record('comment', $comment);
    comment_save($comment);

    $context['message'] = t('Importing comment @subject', array('@subject' => $comment->subject));
    $context['sandbox']['current_comment'] = $row->cid;
    $context['sandbox']['progress']++;
  }
  dsm("Created ". $i ." comments");
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

// Function to import taxonomy terms for forums
function custom_import_batch_taxonomy(&$context) {
  $previous_db = db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcterm_data', td);
    $query->fields('td');
    $query->condition('td.vid', '2', '!=');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  /*
  $query = db_select('tcterm_data', td);
  $query->fields('td');
  $query->condition('td.vid', '2', '!=');
  */
  $query = db_select('tcterm_hierarchy', th);
  $query->fields('th');
  $result = $query->execute();

  db_set_active('default');
  foreach ($result as $row) {
    /*
    $term = (object) $row;
    $term->tid = $row->tid;
    $term->vid = '3';
    $term->name = $row->name; 
    $term->description = $row->description;
    $term->weight = $row->weight;
    */
    $term = (object) $row;
    $term->tid = $row->tid;
    $term->parent = $row->parent;

    //drupal_write_record('taxonomy_term_data', $term);
    drupal_write_record('taxonomy_term_hierarchy', $term);
    
    $context['message'] = t('Importing @subject', array('@subject' => $term->name));
    $context['sandbox']['current_comment'] = $row->tid;
    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/* This function would update the nodes and comments uids to admin or 0 (anon).
 * After the user import is done, the correct uids will be set back.
 */
function custom_import_update_nodeuids(&$context) {

  $previous_db = db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcnode', n);
    $query->fields('n');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('tcnode', n);
  $query->fields('n');
  $result = $query->execute();

  db_set_active('default');
  foreach ($result as $row) {
    
    $node = node_load($row->nid);;
    //$node->nid = $row->nid;
    $node->uid = $row->uid;
    drupal_write_record('node', $node);
    drupal_write_record('node_revision', $node);
    node_save($node);


    $context['message'] = t('Importing @subject', array('@subject' => $node->nid));
    $context['sandbox']['current_comment'] = $row->nid;
    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

}

/* This function will copy over the passwords from the old users table 
 */
function custom_import_update_passwords(&$context) {
  global $user;
  $previous_db = db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcusers', u);
    $query->fields('u');
    $query->condition('u.uid', array('0', '1'), 'NOT IN');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('tcusers', u);
  $query->fields('u', array('uid', 'pass'));
  $query->condition('u.uid', array('0', '1'), 'NOT IN');
  $result = $query->execute();

  db_set_active('default');
  foreach ($result as $row) {
    $num_updated = db_update('users') // Table name no longer needs {}
                   ->fields(array(
                       'pass' => $row->pass,
                     ))
                   ->condition('uid', $row->uid, '=')
                   ->execute();
    $context['message'] = t('Importing @subject', array('@subject' => $node->nid));
    $context['sandbox']['current_comment'] = $row->nid;
    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

}

/* This function will map the old nids to the new nids 
 */
function custom_import_nid_mapping(&$context) {
  global $user;
  db_set_active('default');

  $query = db_select('node', n);
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', array('page'), 'NOT IN');
  $result = $query->execute();

  $new_nodes = array();
  foreach($result as $row){
    //$new_nodes[$row->nid] = strtolower(trim($row->title));
    $new_nodes[$row->nid] = $row->title;
  }

  dsm($new_nodes);
  $previous_db = db_set_active('legacy'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('tcnode', n);
    $query->fields('n');
    $query->condition('n.type', array('page'), 'NOT IN');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('tcnode', n);
  $query->fields('n', array('nid', 'title'));
  //$query->condition('n.type', array('page'), 'NOT IN');
  $result = $query->execute();

  // Get the nid mapping by comparing the titles of the nodes
  db_set_active('default');
  foreach ($result as $row) {
    dsm($row->title);
    dsm(array_search($row->title, $new_nodes));
    /*
    foreach($new_nodes as $new_node){
      if(strcmp($new_node->title, strtolower(trim($row->title))) == 0){
        dsm($row->title);
      }
    }
*/
    if(array_search($row->title, $new_nodes)){
      dsm("hi " . $row->nid);
      $new_nid = array_search($row->title, $new_nodes);
      $old_nid = $row->nid;
      $nid = db_insert('nid_mapping')
             ->fields(array(
	       'id' => NULL,
               'old_nid' => $old_nid,
	       'new_nid' => $new_nid,
	       'title' => $row->title,
      ))->execute();
      /*
      $data = array(
        'old_nid' => $old_nid,
        'new_nid' => $new_nid,
        'title' => $row->title, 
      );
      drupal_write_record('nid_mapping', $data);
      */
      watchdog('Nid mapping', '%nid record written', array('%nid' => $old_nid));
    }    

    $context['message'] = t('Importing @subject', array('@subject' => $row->nid));
    $context['sandbox']['current_comment'] = $row->nid;
    $context['sandbox']['progress']++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

}

function custom_import_node_statistics(){
  devel_rebuild_node_comment_statistics();
  dsm("Node statistics rebuilt");
}
