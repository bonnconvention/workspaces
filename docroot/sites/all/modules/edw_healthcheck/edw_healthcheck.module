<?php

/**
 * Implements hook_menu().
 */
function edw_healthcheck_menu() {
  return array(
    'edw_healthcheck/%' => array(
      'title' => 'EDW HealthCheck',
      'page callback' => 'edw_healthcheck_content',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => 'edw_healthcheck_basic_auth',
    ),
    'edw_healthcheck' => array(
      'title' => 'EDW HealthCheck',
      'page callback' => 'edw_healthcheck_content',
      'page arguments' => array('all'),
      'type' => MENU_CALLBACK,
      'access callback' => 'edw_healthcheck_basic_auth',
    ),
  );
}

function edw_healthcheck_basic_auth() {
  $username = variable_get('edw_healthcheck_user');
  $password = variable_get('edw_healthcheck_pass');

  // Credentials for authentication were received.
  if (isset($_SERVER['PHP_AUTH_PW'], $_SERVER['PHP_AUTH_USER'])) {
    $event = 'edw_healthcheck_basic_auth_failed_login_ip';
    $limit = 5;
    $window = 3600;

    if (flood_is_allowed($event, $limit, $window)) {
      if ($password === $_SERVER['PHP_AUTH_PW'] && $username === $_SERVER['PHP_AUTH_USER']) {
        flood_clear_event($event);
        return TRUE;
      }

      flood_register_event($event, $window);
    }
  }

  header('WWW-Authenticate: Basic realm="Restricted Area"');
  header('HTTP/1.1 401 Unauthorized');

  exit('Access denied.');
}

/**
 * Intermediate function to retrieve and print the module's processed data.
 *
 * @param string $type
 */
function edw_healthcheck_content($type = "all") {
  $data = process_data($type);
  render_data($data);
  drupal_exit();
}

/**
 * Main data processing function.
 *
 * It redirects towards different data processing functions, depending on the type
 * of information that needs to be retrieved.
 *
 * @param $type
 * @return array
 */
function process_data($type) {
  if (in_array($type, ['all', 'core', 'modules'])) {
    module_load_include('inc', 'update', 'update.fetch');
    _update_refresh();
  }

  $data = array();
  switch ($type) {
    case "all":
      $data = array_merge(get_core_data(), get_modules_data(), get_cron_data(), get_enabled_modules_data());
      break;

    case "core":
      $data = get_core_data();
      break;

    case "modules":
      $data = get_modules_data();
      break;

    case "themes":
      $data = get_themes_data();
      break;

    case "last_cron":
      $data = get_cron_data();
      break;

    case "enabled_modules":
      $data = get_enabled_modules_data();
      break;
  }

  return $data;
}

/**
 * Retrieves information on drupal's core.
 */
function get_core_data() {
  $plugin_data = array();
  if ($available = update_get_available(TRUE)) {
    module_load_include('inc', 'update', 'update.compare');
    $data = update_calculate_project_data($available);
    foreach ($data as $module_name => $info) {
      if ($module_name == "drupal") {
        $plugin_data[$module_name] = $info;
        break;
      }
    }
  }
  return $plugin_data;
}

/**
 * Retrieves information on drupal's modules.
 */
function get_modules_data() {
  $plugin_data = array();
  if ($available = update_get_available()) {
    $data = system_rebuild_module_data();

    foreach ($data as $module_name => $info) {
      if ($module_name == "drupal" || $info->info["package"] == "Core" || $info->info["package"] == "Testing") {
        continue;
      }

      $info->project_type = 'module';
      if (empty($info->releases) && !empty($available[$module_name]['releases'])) {
        $info->releases = $available[$module_name]['releases'];
      }
      $plugin_data[$module_name] = $info;
    }
  }
  return $plugin_data;
}

/**
 * Retrieves information on drupal's modules.
 */
function get_themes_data() {
  $plugin_data = system_list('theme');
  foreach ($plugin_data as $theme_name => $info) {
    $info->project_type = 'theme';
  }
  return $plugin_data;
}

/**
 * Retrieves information on drupal's last run cron.
 */
function get_cron_data() {
  $last_cron = variable_get('cron_last');
  $last_run = (gmdate("H", $last_cron) + 3) . ":" . gmdate("i:s", $last_cron);
  $date = new DateTime();
  $request_time = $date->getTimestamp();
  $plugin_data = ['last_cron_plugin' => ['last_cron_run' => $last_run, 'timestamp' => $last_cron, 'active_and_running' => check_cron_status($last_cron, $request_time), 'project_type' => 'last_cron']];
  return $plugin_data;
}

/**
 * Retrieves the list of drupal's enabled modules.
 */
function get_enabled_modules_data() {
  $plugin_data = array();
  $plugin_data['enabled_modules']['project_type'] = 'enabled_modules';
  if ($raw_data = module_list()) {
    foreach ($raw_data as $module_name => $info) {
      $plugin_data['enabled_modules']['modules'][] = $module_name;
    }
  }
  return $plugin_data;
}

/**
 * Helper function that checks the execution of the cron in the last 6 hours.
 *
 * @param $last_cron
 * @param $request_time
 * @return bool
 */
function check_cron_status($last_cron, $request_time) {
  return $last_cron + 21600 > $request_time;
}

/**
 * Rendering function for the data processed by the module.
 *
 * @param $data
 */
function render_data($data) {
  drupal_json_output($data);
}
